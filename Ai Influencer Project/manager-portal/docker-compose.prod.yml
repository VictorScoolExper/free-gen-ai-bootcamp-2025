version: "3.8"

services:
  # Backend Flask API (Production)
  backend:
    build: 
      context: ./backend-flask
      dockerfile: Dockerfile
    container_name: ai-influencer-backend-prod
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
    volumes:
      # Mount only the database file for persistence
      - ai_influencer_data:/app/ai_influencer.db
    networks:
      - ai-influencer-network
    restart: unless-stopped
    # Use gunicorn for production
    command: ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "app:app"]

  # Frontend React App (Production)
  frontend:
    build: 
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: ai-influencer-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - ai-influencer-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-influencer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai-influencer-network
    restart: unless-stopped

networks:
  ai-influencer-network:
    driver: bridge

volumes:
  ai_influencer_data: 